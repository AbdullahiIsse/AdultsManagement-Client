@page "/Adults"
@using Models
@using DNP_Assignment.Data
@inject IAdultData _adultData

<h3>Adults</h3>


<p> Search <input type="Text" @oninput="@((arg) => FilterByFirstname(arg))" /> </p>

@if (AdultsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!AdultsToShow.Any())
{
    <p>
        <em>No ToDo items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>HairColor</th>
            <th>EyeColor</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>JobTitle</th>
            <th>Salary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in AdultsToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
                <td>@item.JobTitle.JobTitle</td>
                <td>@item.JobTitle.Salary</td>


                <td>
                    <button @onclick="@(() => RemoveTodo(item.Id))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>


            </tr>
        }
        </tbody>
    </table>
}

@code {

    private IList<Adult> filterAdultList;
    private IList<Adult> AdultsToShow;
    private string? filterByFirstName;
    


    protected override async Task OnInitializedAsync()
    {
        filterAdultList = _adultData.GetAdults();
        AdultsToShow = filterAdultList;


    }
   
    
    
    private void RemoveTodo(int adultId)
    {
        Adult adultToRemove = AdultsToShow.First(a => a.Id == adultId);
        _adultData.RemoveAdults(adultId);
        
    }

    private void FilterByFirstname(ChangeEventArgs changeEventArgs)
    {
        filterByFirstName = changeEventArgs.Value.ToString();

        if (filterByFirstName.Length <= 0)
        {
            AdultsToShow = filterAdultList;
        }
        else
        {
             AdultsToShow= AdultsToShow.Where(
                                    a => a.FirstName.ToLower().Contains(filterByFirstName.ToLower()) || a.FirstName.ToUpper().Contains(filterByFirstName.ToUpper())||
                                         a.LastName.ToLower().Contains(filterByFirstName.ToLower()) || a.LastName.ToUpper().Contains(filterByFirstName.ToUpper()) ||
                                         a.HairColor.ToLower().Contains(filterByFirstName.ToLower()) || a.HairColor.ToUpper().Contains(filterByFirstName.ToUpper()) ||
                                         a.EyeColor.ToLower().Contains(filterByFirstName.ToLower()) || a.EyeColor.ToUpper().Contains(filterByFirstName.ToUpper()) ||
                                         a.Age.ToString().ToLower().Contains(filterByFirstName.ToLower()) || a.Weight.ToString().ToLower().Contains(filterByFirstName.ToLower()) ||
                                         a.Height.ToString().ToLower().Contains(filterByFirstName.ToLower()) || 
                                         a.Sex.ToLower().Contains(filterByFirstName.ToLower()) || a.Sex.ToUpper().Contains(filterByFirstName.ToUpper()) ||
                                         a.JobTitle.JobTitle.ToLower().Contains(filterByFirstName.ToLower()) || a.JobTitle.JobTitle.ToUpper().Contains(filterByFirstName.ToUpper()) ||
                                         a.JobTitle.Salary.ToString().ToLower().Contains(filterByFirstName.ToLower())).ToList();
        }
        
    }
    
    
    
    

}